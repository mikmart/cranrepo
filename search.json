[{"path":"https://mikmart.github.io/cranrepo/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 cranrepo authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mikmart.github.io/cranrepo/articles/cranrepo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Set up a CRAN-like repository","text":"cranrepo gives basic tools need set CRAN-like R package repository. vignette, ’ll go steps ’d take just .","code":"library(cranrepo)"},{"path":"https://mikmart.github.io/cranrepo/articles/cranrepo.html","id":"create-a-repository","dir":"Articles","previous_headings":"","what":"Create a repository","title":"Set up a CRAN-like repository","text":"first step creating repository set directory structure, PACKAGES files act package indexes. cranrepo single function : repo_create(). Let’s set repository structure temporary location: created directory structure contains distribution trees three main types packages: source, Windows binary, Mac binary packages. ensures repository can used via file: protocol without errors major platform without throwing errors missing files; something ’s particular usefulness setting internal repository shared via network drive, example. addition usual PACKAGES files, ’ll notice distribution trees contain PACKAGES.db file. SQLite databse used cranlike hood manage repository index efficient manner.","code":"repo <- repo_create(fs::path_temp(\"cranrepo/repos/latest\")) fs::dir_tree(repo) #> /tmp/RtmpfXh7Jg/cranrepo/repos/latest #> ├── bin #> │   ├── macosx #> │   │   └── contrib #> │   │       └── 4.3 #> │   │           ├── PACKAGES #> │   │           ├── PACKAGES.db #> │   │           ├── PACKAGES.gz #> │   │           └── PACKAGES.rds #> │   └── windows #> │       └── contrib #> │           └── 4.3 #> │               ├── PACKAGES #> │               ├── PACKAGES.db #> │               ├── PACKAGES.gz #> │               └── PACKAGES.rds #> └── src #>     └── contrib #>         ├── PACKAGES #>         ├── PACKAGES.db #>         ├── PACKAGES.gz #>         └── PACKAGES.rds"},{"path":"https://mikmart.github.io/cranrepo/articles/cranrepo.html","id":"add-packages","dir":"Articles","previous_headings":"","what":"Add packages","title":"Set up a CRAN-like repository","text":"next thing ’ll need add packages repository. Let’s get package insert CRAN. ’ll get source binary bundle. ’s always good practice serve source bundle repository, pre-built binary makes package accessible wider audience. Instead getting package bundles another repository like CRAN, just well build local package R CMD build R CMD INSTALL --build. matters appropriate bundle(s) available inserting repository. Now package bundles, can add repository repo_insert(). , however, need let cranrepo know type bundle inserting. ’s one deliberate design decisions made effort find right level abstraction package. can verify packages successfully inserted checking available packages: Congratulations! ’ve set CRAN-like repository serving source binary packages. said, ’s still operations ’ll need order manage lifecycle package repository.","code":"op <- options(repos = c(CRAN = \"https://cloud.r-project.org\")) src <- download.packages(\"ggplot2\", tempdir(), type = \"source\")[, 2] bin <- download.packages(\"ggplot2\", tempdir(), type = \"win.binary\")[, 2] options(op) repo_insert(repo, src, \"source\") repo_insert(repo, bin, \"win.binary\") available_packages <- function(repos, type = \"source\") {   available.packages(repos = repos, type = type)[, c(\"Package\", \"Version\")] }  available_packages(paste0(\"file:\", repo), type = \"source\") #>   Package   Version  #> \"ggplot2\"   \"3.4.2\" available_packages(paste0(\"file:\", repo), type = \"binary\") #>   Package   Version  #> \"ggplot2\"   \"3.4.2\""},{"path":"https://mikmart.github.io/cranrepo/articles/cranrepo.html","id":"serve-over-http","dir":"Articles","previous_headings":"","what":"Serve over HTTP","title":"Set up a CRAN-like repository","text":"Earlier, accessed repository local computer using file: protocol. Unless repository created network location, chances users won’t able access repository way. Instead, ’ll need either move repository network location, serve files web protocol like HTTP. package repository just collection static files, can served HTTP static server, servr::httd(). Just point server repository root directory: default, httd() serves repository port 4321. can check available packages , another R session: now basics set repository, add packages, distribute collaborators. Next, let’s tackle admin tasks.","code":"servr::httd(repo) available_packages(\"http://localhost:4321\")"},{"path":"https://mikmart.github.io/cranrepo/articles/cranrepo.html","id":"remove-packages","dir":"Articles","previous_headings":"","what":"Remove packages","title":"Set up a CRAN-like repository","text":"Sometimes (hopefully rarely) ’ll realize added package repository really shouldn’t . recover remove package, repo_remove() comes aid. Let’s remove versions ggplot2 Windows binaries repository: returned paths files removed, happens invisibly, print explicitly:","code":"removed <- repo_remove(repo, \"ggplot2\", version = NULL, type = \"win.binary\") removed #> /tmp/RtmpfXh7Jg/cranrepo/repos/latest/bin/windows/contrib/4.3/ggplot2_3.4.2.zip"},{"path":"https://mikmart.github.io/cranrepo/articles/cranrepo.html","id":"update-the-index","dir":"Articles","previous_headings":"","what":"Update the index","title":"Set up a CRAN-like repository","text":"make external changes package repository, may end situation package index sync actual files repository. example, let’s manually delete source bundle ggplot2 added earlier: repository still reports package available: ’ll need call repo_update() bring package index date, report consumers package longer available:","code":"fs::file_delete(fs::path(repo, \"src/contrib\", fs::path_file(src))) available_packages(paste0(\"file:\", repo)) #>   Package   Version  #> \"ggplot2\"   \"3.4.2\" repo_update(repo, \"source\") available_packages(paste0(\"file:\", repo)) #>      Package Version"},{"path":"https://mikmart.github.io/cranrepo/articles/cranrepo.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Set up a CRAN-like repository","text":"wrap , let’s clean files created vignette: go! now basic tools knowledge set manage CRAN-like repository. Use wisely.","code":"fs::dir_delete(repo)"},{"path":"https://mikmart.github.io/cranrepo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mikko Marttila. Author, maintainer.","code":""},{"path":"https://mikmart.github.io/cranrepo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marttila M (2023). cranrepo: Create Maintain CRAN-like Repositories. https://github.com/mikmart/cranrepo, https://mikmart.github.io/cranrepo/.","code":"@Manual{,   title = {cranrepo: Create and Maintain CRAN-like Repositories},   author = {Mikko Marttila},   year = {2023},   note = {https://github.com/mikmart/cranrepo, https://mikmart.github.io/cranrepo/}, }"},{"path":"https://mikmart.github.io/cranrepo/index.html","id":"cranrepo","dir":"","previous_headings":"","what":"Create and Maintain CRAN-like Repositories","title":"Create and Maintain CRAN-like Repositories","text":"cranrepo gives basic tools set CRAN-like R package repository. can: Set repository directory structure index repo_create(). Add source binary package bundles repository repo_insert(). Remove versions packages repository repo_remove(). Sync package index external changes repo_update(). key features include: Fast updates package index, thanks cranlike hood. concise yet sufficient interface easily build tools top .","code":""},{"path":"https://mikmart.github.io/cranrepo/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create and Maintain CRAN-like Repositories","text":"can install development version cranrepo GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"mikmart/cranrepo\")"},{"path":"https://mikmart.github.io/cranrepo/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Create and Maintain CRAN-like Repositories","text":"packages repository management space include: miniCRAN, focuses creating complete snapshots sets curated packages CRAN-like repos, lacks support packages sources, local bundles. drat, broad set tools manage repository, also many high level features, conveniences (especially around git GitHub), opinions can cause friction trying use base tools. goal cranrepo strike balance high level enough useful setting repository, yet low level enough make easy build tools top . Essentially, ’s set fundamental repository management tools wish drat exposed.","code":""},{"path":"https://mikmart.github.io/cranrepo/reference/cranrepo-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cranrepo: Create and Maintain CRAN-like Repositories — cranrepo-package","title":"cranrepo: Create and Maintain CRAN-like Repositories — cranrepo-package","text":"Basic tools creating CRAN-like package repositories, adding removing packages, keeping package index updated.","code":""},{"path":[]},{"path":"https://mikmart.github.io/cranrepo/reference/cranrepo-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cranrepo: Create and Maintain CRAN-like Repositories — cranrepo-package","text":"Maintainer: Mikko Marttila mikkmart@pm.","code":""},{"path":"https://mikmart.github.io/cranrepo/reference/repo_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a CRAN-like package repository — repo_create","title":"Create a CRAN-like package repository — repo_create","text":"Set directory structure package indexes CRAN-like package repository suitable install.packages() .","code":""},{"path":"https://mikmart.github.io/cranrepo/reference/repo_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a CRAN-like package repository — repo_create","text":"","code":"repo_create(root = \".\", r_version = getRversion())"},{"path":"https://mikmart.github.io/cranrepo/reference/repo_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a CRAN-like package repository — repo_create","text":"root Path directory use repository root. created exist. r_version version R create binary distribution trees .","code":""},{"path":"https://mikmart.github.io/cranrepo/reference/repo_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a CRAN-like package repository — repo_create","text":"Path repository root directory, invisibly.","code":""},{"path":"https://mikmart.github.io/cranrepo/reference/repo_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a CRAN-like package repository — repo_create","text":"Binary distribution trees always created avoid errors repository accessed via file:// protocol.","code":""},{"path":[]},{"path":"https://mikmart.github.io/cranrepo/reference/repo_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a CRAN-like package repository — repo_create","text":"","code":"if (FALSE) { # Create a package repository repo_create(\"./repos/latest\") }"},{"path":"https://mikmart.github.io/cranrepo/reference/repo_insert.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a package bundle into a repository — repo_insert","title":"Insert a package bundle into a repository — repo_insert","text":"can insert multiple packages one call, long type version R.","code":""},{"path":"https://mikmart.github.io/cranrepo/reference/repo_insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a package bundle into a repository — repo_insert","text":"","code":"repo_insert(repo, file, type, r_version = getRversion(), replace = TRUE)"},{"path":"https://mikmart.github.io/cranrepo/reference/repo_insert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a package bundle into a repository — repo_insert","text":"repo Path root directory package repository. file Path source binary package bundle added. type Type packages. One : \"source\", \"win.binary\", \"mac.binary\". r_version binary packages, version R built . replace Logical. package replaced already present?","code":""},{"path":"https://mikmart.github.io/cranrepo/reference/repo_insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a package bundle into a repository — repo_insert","text":"Path(s) inserted package file(s), invisibly.","code":""},{"path":[]},{"path":"https://mikmart.github.io/cranrepo/reference/repo_insert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert a package bundle into a repository — repo_insert","text":"","code":"if (FALSE) { # Insert different types of package bundles repo_insert(\"./repos/latest\", \"foo_0.1.0.tar.gz\", \"source\") repo_insert(\"./repos/latest\", \"foo_0.1.0.zip\", \"win.binary\") repo_insert(\"./repos/latest\", \"foo_0.1.0.tgz\", \"mac.binary\")  # Throw an error if trying to insert a package that already exists repo_insert(\"./repos/latest\", \"foo_0.1.0.tar.gz\", \"source\", replace = FALSE)  # Insert a binary built for a different version of R repo_insert(\"./repos/latest\", \"foo_0.1.0.zip\", \"win.binary\", r_version = \"4.0\") }"},{"path":"https://mikmart.github.io/cranrepo/reference/repo_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a package from a repository — repo_remove","title":"Remove a package from a repository — repo_remove","text":"dry run, specify commit = FALSE just show list files removed.","code":""},{"path":"https://mikmart.github.io/cranrepo/reference/repo_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a package from a repository — repo_remove","text":"","code":"repo_remove(   repo,   package,   version,   type,   r_version = getRversion(),   commit = TRUE )"},{"path":"https://mikmart.github.io/cranrepo/reference/repo_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a package from a repository — repo_remove","text":"repo Path root directory package repository. package name package remove. version version package remove. Use NULL remove versions. type Type packages. One : \"source\", \"win.binary\", \"mac.binary\". r_version binary packages, version R built . commit Logical. FALSE return list files removed, without actually removing .","code":""},{"path":"https://mikmart.github.io/cranrepo/reference/repo_remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a package from a repository — repo_remove","text":"Path(s) removed package file(s), invisibly.","code":""},{"path":[]},{"path":"https://mikmart.github.io/cranrepo/reference/repo_remove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a package from a repository — repo_remove","text":"","code":"if (FALSE) { # Remove a specific version of a package repo_remove(\"./repos/latest\", \"foo\", \"0.1.0\", \"source\")  # Remove all versions of a package repo_remove(\"./repos/latest\", \"foo\", NULL, \"win.binary\")  # Get a list of packages that would be removed repo_remove(\"./repos/latest\", \"foo\", NULL, \"mac.binary\", commit = FALSE) }"},{"path":"https://mikmart.github.io/cranrepo/reference/repo_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the package index of a repository — repo_update","title":"Update the package index of a repository — repo_update","text":"full update package index repository. Functions package update index operate, calling necessary index gone sync due external changes.","code":""},{"path":"https://mikmart.github.io/cranrepo/reference/repo_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the package index of a repository — repo_update","text":"","code":"repo_update(repo, type, r_version = getRversion())"},{"path":"https://mikmart.github.io/cranrepo/reference/repo_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the package index of a repository — repo_update","text":"repo Path root directory package repository. type Type packages. One : \"source\", \"win.binary\", \"mac.binary\". r_version binary packages, version R built .","code":""},{"path":[]},{"path":"https://mikmart.github.io/cranrepo/reference/repo_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the package index of a repository — repo_update","text":"","code":"if (FALSE) { # Update a package index that has gone out of sync repo_update(\"./repos/latest\", \"source\") }"}]
