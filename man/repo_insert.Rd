% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/repo.R
\name{repo_insert}
\alias{repo_insert}
\title{Insert a package bundle into a repository}
\usage{
repo_insert(repo, file, type, r_version = getRversion(), replace = TRUE)
}
\arguments{
\item{repo}{Path to the root directory of the package repository.}

\item{file}{Path to the source or binary package bundle to be added.}

\item{type}{Type of packages. One of: \code{"source"}, \code{"win.binary"}, \code{"mac.binary"}.}

\item{r_version}{For binary packages, the version of R they were built for.}

\item{replace}{Logical. Should the package be replaced if already present?}
}
\value{
Path(s) to the inserted package file(s), invisibly.
}
\description{
You can insert multiple packages with one call, as long as they are of the
same type and for the same version of R.
}
\examples{
\dontrun{
# Insert different types of package bundles
repo_insert("./repos/latest", "foo_0.1.0.tar.gz", "source")
repo_insert("./repos/latest", "foo_0.1.0.zip", "win.binary")
repo_insert("./repos/latest", "foo_0.1.0.tgz", "mac.binary")

# Throw an error if trying to insert a package that already exists
repo_insert("./repos/latest", "foo_0.1.0.tar.gz", "source", replace = FALSE)

# Insert a binary built for a different version of R
repo_insert("./repos/latest", "foo_0.1.0.zip", "win.binary", r_version = "4.0")
}
}
\seealso{
Other functions to manage repositories: 
\code{\link{repo_create}()},
\code{\link{repo_remove}()},
\code{\link{repo_update}()}
}
\concept{functions to manage repositories}
\concept{manage}
